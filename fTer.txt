#version 330 core
out vec4 FragColor;


in vec3 Normal;
in vec3 FragPos;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 sourcePosition;
uniform vec3 viewPos;








void main()
{
    
    vec3 LightDirection = normalize(sourcePosition-FragPos);
    vec3 norm= normalize(Normal);
    float diff= max(dot(norm,LightDirection),0.0);
  
    vec3 viewDir = normalize(viewPos-FragPos);
    vec3 reflection = normalize(reflect(-LightDirection,norm));
    float specularFactor = max(dot(reflection,viewDir),0.0);
    vec3 specular = specularFactor*0.5f*lightColor;

    float ambientStrength = 0.3;
    vec3 diffuse = diff*lightColor;
    vec3 ambient = ambientStrength* lightColor;
    vec3 result = (ambient+diffuse+specular)* objectColor;

    FragColor = vec4(result,1.0);
}